name: Weekly LinkedIn Auto Post

on:
  schedule:
    # Runs every Sunday at 5:00 PM NZST
    - cron: '0 5 * * 0'  # 5:00 AM UTC = 6:00 PM NZDT / 5:00 PM NZST
  
  # Allow manual triggering only
  workflow_dispatch:

jobs:
  post-to-linkedin:
    runs-on: ubuntu-latest
    # Only run on schedule or manual trigger, never on push
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Post to LinkedIn
      run: |
        # Create JSON payload for LinkedIn API with properly escaped content
        curl -s -X POST "https://api.linkedin.com/v2/ugcPosts" \
          -H "Authorization: Bearer ${{ secrets.LINKEDIN_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "author": "urn:li:person:LFmKmXorjj",
            "lifecycleState": "PUBLISHED",
            "specificContent": {
              "com.linkedin.ugc.ShareContent": {
                "shareCommentary": {
                  "text": "üöÄ Ready to accelerate your AI learning journey?\n\nJoin the AI Builders Community where we turn curiosity into capability through hands-on collaborative projects!\n\n‚ú® What makes us different:\n‚Ä¢ Use case-driven learning (no more tutorial hell!)\n‚Ä¢ Structured pathway from Explorer to Builder\n‚Ä¢ Real-world projects with mockups & wireframes\n‚Ä¢ Safe learning space free of judgment\n‚Ä¢ Community of like-minded AI enthusiasts\n\nWhether you'\''re a complete beginner or looking to upskill, we meet you where you are and help you reach where you want to go.\n\nüéØ Ready to build your AI future?\n\n#AI #ArtificialIntelligence #AILearning #TechCommunity #SkillDevelopment #AIEducation #ProductFoundry #FutureOfWork #MachineLearning #Innovation\n\n‚ú® Ready to start your AI journey? Join our AI Explorers program: https://productfoundry.ai/individuals-ai-explorers"
                },
                "shareMediaCategory": "NONE"
              }
            },
            "visibility": {
              "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
            }
          }' > linkedin_response.json

        # Check response
        RESPONSE=$(cat linkedin_response.json)
        echo "LinkedIn API Response: $RESPONSE"

        # Check if post was successful
        if echo "$RESPONSE" | grep -q '"id"'; then
          echo "‚úÖ LinkedIn post created successfully!"
          POST_ID=$(echo "$RESPONSE" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          echo "Post ID: $POST_ID"
          
          # Log the successful post
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "$TIMESTAMP SUCCESS ai-builders-community linkedin Posted: $POST_ID - Weekly automated post" >> marketing/logs/activity.log
          
          # Update posting log JSON
          python3 -c "
import json
import os
from datetime import datetime

log_file = 'marketing/posts/ai-builders-community/posting-log.json'
if os.path.exists(log_file):
    with open(log_file, 'r') as f:
        log_data = json.load(f)
else:
    log_data = {'post_id': 'ai-builders-community', 'total_posts': 0, 'posting_history': []}

# Add new entry
new_entry = {
    'date': '$TIMESTAMP',
    'platform': 'linkedin',
    'post_id': '$POST_ID',
    'status': 'success',
    'content_version': 'v2.0',
    'engagement': {'views': None, 'likes': None, 'comments': None, 'shares': None},
    'notes': 'Weekly automated post with ProductFoundry link'
}

log_data['posting_history'].append(new_entry)
log_data['total_posts'] = len(log_data['posting_history'])
log_data['last_posted'] = '$TIMESTAMP'

with open(log_file, 'w') as f:
    json.dump(log_data, f, indent=2)
"
          
          # Commit the log updates
          git add marketing/logs/activity.log marketing/posts/ai-builders-community/posting-log.json
          git config --global user.email "noreply@github.com"
          git config --global user.name "LinkedIn Auto-poster"
          git commit -m "üìä Log LinkedIn post: $POST_ID - $(date '+%Y-%m-%d %H:%M UTC')" || echo "No changes to commit"
          git push || echo "Push failed - continuing anyway"
          
          # Create success issue for tracking  
          gh issue create \
            --title "‚úÖ LinkedIn Post Created - $(date '+%Y-%m-%d')" \
            --body "LinkedIn post was automatically created on $(date).\n\n**Post ID:** $POST_ID\n\n**API Response:**\n\`\`\`json\n$RESPONSE\n\`\`\`"
        else
          echo "‚ùå LinkedIn post failed!"
          
          # Log the failed post
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "$TIMESTAMP ERROR ai-builders-community linkedin Failed: $(echo "$RESPONSE" | grep -o '"message":"[^"]*"' | cut -d'"' -f4)" >> marketing/logs/activity.log
          echo "$TIMESTAMP ERROR ai-builders-community linkedin Response: $RESPONSE" >> marketing/logs/errors.log
          
          # Update posting log with failure
          python3 -c "
import json
import os

log_file = 'marketing/posts/ai-builders-community/posting-log.json'
if os.path.exists(log_file):
    with open(log_file, 'r') as f:
        log_data = json.load(f)
else:
    log_data = {'post_id': 'ai-builders-community', 'total_posts': 0, 'posting_history': []}

# Add failed entry
new_entry = {
    'date': '$TIMESTAMP',
    'platform': 'linkedin',
    'post_id': None,
    'status': 'failed',
    'content_version': 'v2.0',
    'engagement': None,
    'notes': 'Post failed - see error log',
    'error': '$RESPONSE'
}

log_data['posting_history'].append(new_entry)
log_data['total_posts'] = len(log_data['posting_history'])

with open(log_file, 'w') as f:
    json.dump(log_data, f, indent=2)
"
          
          # Commit the error logs
          git add marketing/logs/activity.log marketing/logs/errors.log marketing/posts/ai-builders-community/posting-log.json 2>/dev/null || true
          git config --global user.email "noreply@github.com"
          git config --global user.name "LinkedIn Auto-poster"
          git commit -m "üö® Log LinkedIn post failure - $(date '+%Y-%m-%d %H:%M UTC')" || echo "No changes to commit"
          git push || echo "Push failed - continuing anyway"
          
          # Create failure issue for debugging
          gh issue create \
            --title "‚ùå LinkedIn Post Failed - $(date '+%Y-%m-%d')" \
            --body "LinkedIn post failed on $(date).\n\n**Error Response:**\n\`\`\`json\n$RESPONSE\n\`\`\`\n\nPlease check the LinkedIn access token and API configuration."
          
          exit 1
        fi
        
        # Cleanup
        rm -f linkedin_response.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}